{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<pre><code>  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557  Prompt Rich Templating CLI Engine\n  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551  \u2588\u2588\u2551  For LLM Prompts and Shell Commands\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551  with Multi-Step Processing Pipelines\n  \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\n  \u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\n  \u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\n</code></pre>"},{"location":"#prich","title":"prich","text":"<p>CLI tool for prompt-rich, shareable LLM templates with pre/post-processing and multi-step pipeline workflows \u2014 use it for your code review, git-diff summaries, CSV insights, logs and results analysis, and more!</p> <ul> <li>Why prich? Reusable Jinja2 templates, flexible steps (shell/Python/LLM), and isolated per-template venvs for dependable runs. Teams can share a <code>.prich/</code> folder or zip packages and install with one command.  </li> <li>Supported providers: Ollama API, OpenAI-compatible HTTP, MLX (local, mac), and a safe echo/STDIN mode for dry-runs or custom bridges.  </li> </ul> <p>Status: early, under active development.</p>"},{"location":"#what-you-can-do","title":"What you can do","text":"<ul> <li>Chain steps: run <code>git diff</code>, parse files, then ask the LLM to summarize or review.</li> <li>Share and install templates from a remote repo or local zips/folders.</li> </ul>"},{"location":"#90-second-quickstart","title":"90-second Quickstart","text":"<pre><code># Install (recommended)\npipx install git+https://github.com/oleks-dev/prich\n\n# Initialize config (global)\nprich init --global\n\n# Create &amp; run your first template (this will create a very simple one step template)\nprich create my-template --global\nprich run my-template\n</code></pre> <p>By default, prich uses the echo provider (renders your prompt only). Switch providers by editing ~/.prich/config.yaml (see Reference \u2192 Config \u2192 Providers).</p>"},{"location":"#learn-more","title":"Learn more","text":"<ul> <li>Installation: Install prich \u00b7 Install templates</li> <li>Tutorials: Quickstart</li> <li>Reference: Providers \u00b7 Template \u00b7 CLI (auto)</li> </ul>"},{"location":"how-to/install-templates/","title":"Install Templates","text":"<p>There are several ways to install templates. You can install them from remote repository or from local zip archive or template folder. For local option download or clone a template package (e.g., csv_analysis_template/) as a folder or a zip file and install it:</p>"},{"location":"how-to/install-templates/#install-template-from-remote-github-template-repository","title":"Install template from remote GitHub Template Repository","text":"<p>Templates are stored in this github prich-templates repository</p> <ul> <li> <p>List Available Remote Templates for Installation</p> <p>```bash</p> </li> <li> <p>Install Template from prich-templates Repository</p> <p>```bash</p>"},{"location":"how-to/install-templates/#list-all-remote-templates","title":"list all remote templates","text":"<p>prich list --remote ```</p> <p>```bash</p>"},{"location":"how-to/install-templates/#filter-remote-templates-using-tags","title":"filter remote templates using tags","text":"<p>prich list --remote --tag code --tag review ```</p>"},{"location":"how-to/install-templates/#install-in-current-prich-folder","title":"install in current prich folder","text":"<p>prich install  --remote ``` <p>```bash</p>"},{"location":"how-to/install-templates/#install-in-home-prich-folder","title":"install in home prich folder","text":"<p>prich install  --remote --global ```"},{"location":"how-to/install-templates/#install-from-a-local-template-zip-file","title":"Install from a local template zip file","text":"<pre><code>prich install &lt;template-zip-file&gt;.zip\n</code></pre>"},{"location":"how-to/install-templates/#install-from-a-local-template-folder","title":"Install from a local template folder","text":"<pre><code>prich install &lt;template-folder&gt;\n</code></pre> <pre><code>prich install ./code-review\n</code></pre> <p>This copies files, sets up venvs, and installs dependencies - if python is used there.</p>"},{"location":"how-to/install-templates/#reinstall-template","title":"Reinstall template","text":"<p>To reinstall template use <code>--force</code> flag together with the selected install template, this will reinstall the template and it's isolated venv (if any).</p> <pre><code># from remote repo\nprich install code-review --remote --force\n# from local folder\nprich install ./code-review --force\n# from archive file\nprich install code-review.zip --force\n</code></pre>"},{"location":"how-to/install/","title":"Install &amp; Update","text":""},{"location":"how-to/install/#install-prich","title":"Install prich","text":"<p>Note: prich requires python 3.10+</p> <p>Until prich is published on PyPI, you can install it directly from GitHub.</p> <p>Recommended: Use <code>pipx</code> </p> <p>Make sure pipx is installed <code>pip install pipx &amp;&amp; pipx ensurepath</code> or <code>brew install pipx &amp;&amp; pipx ensurepath</code> </p> <pre><code>pipx install git+https://github.com/oleks-dev/prich\n</code></pre> <p>This installs prich in an isolated environment, ideal for CLI tools.  </p> <p>Alternative: Use <code>uv</code></p> <pre><code>uv venv prich-env\nsource prich-env/bin/activate\nuv pip install git+https://github.com/oleks-dev/prich\n</code></pre> <p>Manual</p> <pre><code>git clone https://github.com/oleks-dev/prich.git\ncd prich\npython -m venv .venv\nsource .venv/bin/activate\npip install .\n</code></pre> <p>Help To display possible commands </p> <pre><code>prich --help\n</code></pre>"},{"location":"how-to/install/#update-prich","title":"Update prich","text":"<p>Using <code>pipx</code> with <code>--force</code> to reinstall:</p> <pre><code>pipx install git+https://github.com/oleks-dev/prich --force\n</code></pre>"},{"location":"how-to/install/#initialize-prich","title":"Initialize prich","text":"<p>prich uses nodejs-like home/local folder configurations for flexible usage of the configs and templates per project.  </p> <ul> <li> <p>Local (current) folder based        <code>bash        prich init</code>        &gt; Creates <code>.prich/</code> with a default preprocessing shared venv (<code>.prich/venv/</code>) and config file.  </p> </li> <li> <p>Global user folder based        <code>bash        prich init -g</code></p> <p>Creates <code>~/.prich/</code> with a default preprocessing shared venv (<code>~/.prich/venv/</code>) and config file.</p> </li> </ul>"},{"location":"how-to/install/#shell-completion","title":"Shell Completion","text":"<p><code>prich</code> supports autocompletion for zsh, bash, and fish.</p>"},{"location":"how-to/install/#zsh","title":"Zsh","text":"<pre><code># Option 1: One-liner (recommended)\nprich completion zsh &gt; ~/.zfunc/_prich\necho 'fpath=(~/.zfunc $fpath)' &gt;&gt; ~/.zshrc\nautoload -Uz compinit &amp;&amp; compinit\n\n# Option 2: Source manually in ~/.zshrc\nprich completion zsh &gt; ~/.prich-completion.zsh\necho 'source ~/.prich-completion.zsh' &gt;&gt; ~/.zshrc\n</code></pre>"},{"location":"how-to/install/#bash","title":"Bash","text":"<p>NOTE!: Requires bash \u2265 4.4 (the system bash on macOS is too old, install <code>brew install bash</code> if needed).</p> <pre><code># Option 1: One-liner\nprich completion bash &gt; ~/.prich-completion.bash\necho 'source ~/.prich-completion.bash' &gt;&gt; ~/.bashrc\n\n# Option 2: Generate directly inside ~/.bashrc\necho 'eval \"$(_PRICH_COMPLETE=bash_source prich)\"' &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"how-to/install/#fish","title":"Fish","text":"<pre><code># Option 1: Copy into fish completions dir\nprich completion fish &gt; ~/.config/fish/completions/prich.fish\n\n# Option 2: Source manually from config.fish\nprich completion fish &gt; ~/.prich-completion.fish\necho 'source ~/.prich-completion.fish' &gt;&gt; ~/.config/fish/config.fish\n</code></pre> <p>After running one of the above, restart your shell and try:  </p> <pre><code>prich &lt;TAB&gt;\n</code></pre>"},{"location":"reference/cli/","title":"CLI Reference","text":""},{"location":"reference/cli/#cli","title":"cli","text":"<p>prich: CLI for reusable rich LLM prompts with script pipelines.</p> <p>Usage:</p> <pre><code>cli [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --version  Show the version and exit.\n  --help     Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#cli-config","title":"cli config","text":"<p>Manage prich configuration.</p> <p>Usage:</p> <pre><code>cli config [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#cli-config-edit","title":"cli config edit","text":"<p>Edit config using the default editor.</p> <p>Usage:</p> <pre><code>cli config edit [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -g, --global  Only global config\n  -l, --local   Only local config\n  --help        Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#cli-config-providers","title":"cli config providers","text":"<p>Show available LLM providers.</p> <p>Usage:</p> <pre><code>cli config providers [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -g, --global   Only global config providers\n  -l, --local    Only local config providers\n  -d, --details  Show full provider details\n  --help         Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#cli-config-show","title":"cli config show","text":"<p>Show config.</p> <p>Usage:</p> <pre><code>cli config show [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -g, --global  Only global config\n  -l, --local   Only local config\n  --help        Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#cli-create","title":"cli create","text":"<p>Create new Template based on basic example template.</p> <p>Usage:</p> <pre><code>cli create [OPTIONS] TEMPLATE_ID\n</code></pre> <p>Options:</p> <pre><code>  -g, --global  Create global template\n  -e, --edit    Open created template yaml file in editor\n  --help        Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#cli-init","title":"cli init","text":"<p>Initialize prich configuration and default venv.</p> <p>Usage:</p> <pre><code>cli init [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -g, --global  Initialize ~/.prich/ (global)\n  --force       Overwrite existing config\n  --help        Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#cli-install","title":"cli install","text":"<p>Install a template from PATH, zip, or prich-templates.</p> <p>Usage:</p> <pre><code>cli install [OPTIONS] PATH\n</code></pre> <p>Options:</p> <pre><code>  --force       Overwrite existing templates\n  --no-venv     Skip venv setup\n  -g, --global  Install to ~/.prich/templates\n  -r, --remote  Install template from prich-templates GitHub repo or zip URL\n  --help        Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#cli-list","title":"cli list","text":"<p>List templates.</p> <p>Usage:</p> <pre><code>cli list [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -g, --global    List only global templates\n  -l, --local     List only local templates\n  -t, --tag TEXT  Tag to include (ex. '-t code -t review')\n  -r, --remote    List remote templates available for installation\n  -j, --json      Output in json format\n  --help          Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#cli-run","title":"cli run","text":"<p>Run a template with dynamic arguments. Specify your template_id in the COMMAND. When templates are present you will see them in the Commands list.</p> <p>Usage:</p> <pre><code>cli run [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -g, --global  Only global config and templates\n  -l, --local   Only local config and templates\n  --help        Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#cli-show","title":"cli show","text":"<p>Show available options for a template.</p> <p>Usage:</p> <pre><code>cli show [OPTIONS] TEMPLATE_ID\n</code></pre> <p>Options:</p> <pre><code>  -g, --global  Only global config\n  --help        Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#cli-tags","title":"cli tags","text":"<p>List available tags from templates.</p> <p>Usage:</p> <pre><code>cli tags [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -g, --global  List only global templates\n  -l, --local   List only local templates\n  --help        Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#cli-validate","title":"cli validate","text":"<p>Validate Templates by checking yaml template schema</p> <p>Usage:</p> <pre><code>cli validate [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --id TEXT     Template ID to validate\n  --file PATH   Template YAML file to validate\n  -g, --global  Validate only global templates\n  -l, --local   Validate only local templates\n  --invalid     Show only invalid templates\n  --help        Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#cli-venv-install","title":"cli venv-install","text":"<p>Install venv for Template with python script steps</p> <p>Usage:</p> <pre><code>cli venv-install [OPTIONS] TEMPLATE_ID\n</code></pre> <p>Options:</p> <pre><code>  -g, --global  Only global config\n  -f, --force   Re-install venv\n  --help        Show this message and exit.\n</code></pre>"},{"location":"reference/config/provider-modes/","title":"Provider Modes <code>provider_modes</code>","text":"<p>Use to specify how the prompt would be constructed for the LLM, you can modify or add your own as needed in the <code>config.yaml</code> - <code>provider_modes</code>.</p> <p><code>mode</code> controls how custom instructions/input (system/user) are arranged for the provider, ex: - <code>plain</code> \u2192 instructions and input without extras - <code>flat</code> \u2192 simple \u201cSystem/User/Assistant\u201d text blocks with headers - <code>chatml</code> \u2192 <code>[{role, content}, \u2026]</code> - <code>mistral-instruct</code>, <code>llama2-chat</code>, <code>anthropic</code> \u2192 provider-specific wrappers  </p> <p>For Ollama use <code>raw: true</code> to bypass standard provider prompt formatting and use your custom prompt mode.  </p>"},{"location":"reference/config/provider-modes/#more-detailed-examples","title":"More detailed examples","text":"<p>There are two fields available that are used in the template prompts. It could be <code>instructions</code> for system instructions and <code>input</code> as a user query.</p>"},{"location":"reference/config/provider-modes/#plain","title":"<code>plain</code>","text":"<pre><code>{% if instructions %}{{ instructions }}\\n{% endif %}{{ input }}\n</code></pre> <p>Example</p> <pre><code>You are an assistant.\nWrite a small tech article.\n</code></pre>"},{"location":"reference/config/provider-modes/#flat","title":"<code>flat</code>","text":"<pre><code>{% if instructions %}### System:\n{{ instructions }}\n\n{% endif %}### User:\n{{ input }}\n\n### Assistant:\n</code></pre> <pre><code>### System:\nYou are an assistant.\n\n### User:\nWrite a small tech article.\n\n### Assistant:\n</code></pre>"},{"location":"reference/config/provider-modes/#chatml","title":"<code>chatml</code>","text":"<pre><code>[\n  {% if instructions %}{\"role\": \"system\", \"content\": \"{{ instructions }}\" },\n  {% endif %}{\"role\": \"user\", \"content\": \"{{ input }}\" }\n]\n</code></pre> <pre><code>[\n  {\"role\": \"system\", \"content\": \"You are an assistant.\"},\n  {\"role\": \"user\", \"content\": \"Write a small tech article.\"}\n]\n</code></pre>"},{"location":"reference/config/provider-modes/#anthropic","title":"<code>anthropic</code>","text":"<pre><code>Human: {% if instructions %}{instructions}\n\n{% endif %}{{ input }}\n\nAssistant:\n</code></pre> <pre><code>Human: You are an assistant.\n\nWrite a small tech article.\n\nAssistant:\n</code></pre>"},{"location":"reference/config/providers/","title":"Providers <code>providers</code>","text":"<p>prich supports multiple provider backends. You can set a <code>settings.default_provider</code>, assign provider to a specific template using <code>settings.provider_assignments</code> (see Template Provider Assignments), and override it per run with <code>--provider &lt;provider-name&gt;</code>.</p> <p>Currently <code>prich</code> supports <code>OpenAI</code>, <code>Ollama</code>, and <code>MLX LM</code> providers, plus <code>STDIN Consumer</code> and simple <code>echo</code> output.</p>"},{"location":"reference/config/providers/#echo-echo","title":"Echo <code>echo</code>","text":"<p>Render the prompt but do not call a model (good for debugging, CI dry-runs, copy-paste into other tool, or pipe to stdin).</p> <pre><code>show_prompt:\n  provider_type: \"echo\"\n  mode: \"flat\"      # see \"Modes\"\n</code></pre>"},{"location":"reference/config/providers/#openai-compatible-http-openai","title":"OpenAI-compatible HTTP <code>openai</code>","text":"<p>Generic HTTP client for OpenAI and compatible services.</p> <pre><code>openai-gpt4o:\n  provider_type: \"openai\"\n  configuration:                    # would be sent as OpenAI(**configuration)\n    api_key: \"${OPENAI_API_KEY}\"\n    base_url: \"https://api.openai.com/v1\"   # &lt;\u2014 use a real endpoint\n  options:                          # would be sent as client.chat.completions.create(**options)\n    model: \"gpt-4o\"\n</code></pre>"},{"location":"reference/config/providers/#ollama-http-using-generate-endpoint-ollama","title":"Ollama HTTP (using /generate endpoint) <code>ollama</code>","text":"<p>Local server (using http://localhost:11434 by default)</p> <pre><code>llama31-8b:\n  provider_type: \"ollama\"\n  model: \"llama3.1:8b\"\n  stream: true\n  options:\n    num_predict: 3000\n</code></pre> <p>Advanced/raw prompt control:  </p> <p>NOTE: Use <code>raw: true</code> and <code>mode: ...</code> for custom provider prompt mode format:  </p> <pre><code>qwen3-8b-custom:\n  provider_type: \"ollama\"\n  model: \"qwen3:8b\"    # model name installed in your Ollama\n  mode: \"flat\"         # optional [str] name of prich config provider prompt template mode (see config.yaml `provider_modes`)\n  base_url: \"http://localhost:11434\"  # optional [str] - Ollama server URL \n  think: true          # optional [bool] - for thinking models only to enable/disable\n  stream: true         # optional [bool] - stream output\n  suffix: \"\"           # optional [str]\n  raw: true            # optional [bool] - send prompt without default model prompt template, use with `mode: \"...\"`\n  format: \"json\"       # optional [dict | str] - \"json\" or json schema for specific output format\n  options:             # optional [dict] - model options (vary depending on used model)\n    num_predict: 5000\n</code></pre>"},{"location":"reference/config/providers/#stdin-consumer-bridge-to-clis-stdin_consumer","title":"STDIN consumer (bridge to CLIs) <code>stdin_consumer</code>","text":"<p>Send prompts to a command via STDIN and read STDOUT (e.g., q chat, mlx_lm.generate).</p>"},{"location":"reference/config/providers/#q-chat","title":"Q Chat","text":"<pre><code>qchat:\n  provider_type: \"stdin_consumer\"\n  mode: \"flat\"\n  call: \"q\"                           # executable file\n  args: [\"chat\", \"--no-interactive\"]  # optional arguments\n  filter:\n    strip: true             # strip leading and ending spaces\n    strip_prefix: \"&gt; \"      # remove q char initial character and space\n</code></pre>"},{"location":"reference/config/providers/#mlx-lm-generate","title":"MLX LM Generate","text":"<pre><code>  mlx-mistral-7b-cli:\n    provider_type: stdin_consumer\n    mode: plain\n    call: \"mlx_lm.generate\"\n    args:\n      - \"--model\"\n      - \"/Users/guest/.cache/huggingface/hub/models--mlx-community--Mistral-7B-Instruct-v0.3-4bit/snapshots/a4b8f870474b0eb527f466a03fbc187830d271f5\"\n      - \"--prompt\"\n      - \"-\"\n    filter:\n      regex_extract: \"^==========\\\\n((?:.|\\\\n)+)\\\\n\\\\=\\\\=\\\\=\\\\=\\\\=\\\\=\\\\=\\\\=\\\\=\\\\=(?:.|\\\\n)+$\"\n</code></pre>"},{"location":"reference/config/security/","title":"Security <code>security</code>","text":""},{"location":"reference/config/security/#allowed-environment-variables-allowed_environment_variables","title":"Allowed Environment Variables <code>allowed_environment_variables</code>","text":"<p>Used to define a list of environment variable names that are allowed to access from the templates.</p> <p>For example:</p> <pre><code>security:\n  allowed_environment_variables: [\"PATH\", \"CUSTOM_VAR\"]\n</code></pre>"},{"location":"reference/config/settings/","title":"Settings <code>settings</code>","text":"<p>Global settings live under <code>settings</code>:</p> <pre><code>settings:\n  default_provider: \"llama3.1-8b\"   # default_provider: \"&lt;your-provider-name&gt;\"\n  editor: \"vim\"                     # optional [str], default \"vi\"\n  provider_assignments:             # optional [dict]\n    \"code-review\": \"llama3.1-8b\"    # &lt;template_id&gt;: &lt;provider_name&gt;\n    \"summarize-git-diff\": \"qwen3-8b\"\n</code></pre>"},{"location":"reference/config/settings/#default-provider-default_provider","title":"Default Provider <code>default_provider</code>","text":"<p>Name of a provider defined in the same file. Specify the default provider that would be used in all templates by default if no <code>provider_assignements</code> set and not overloaded with <code>--provider</code> argument option.</p>"},{"location":"reference/config/settings/#editor-command-editor","title":"Editor command <code>editor</code>","text":"<p>Used by commands that open an editor to edit config/template yaml files.  <code>vi</code> by default, you can use your favorite like <code>vim</code>, <code>nano</code>, etc. that executes like <code>&lt;cmd&gt; &lt;file&gt;</code></p>"},{"location":"reference/config/settings/#template-to-provider-assignments-provider_assignments","title":"Template to Provider assignments <code>provider_assignments</code>","text":"<p>Use this when you want to use different specific providers assigned to different templates.</p>"},{"location":"reference/template/content/","title":"Template Content Details","text":"<p>Templates are stored in yaml files and folders with additional optional files like scrips and other resources. Stored in <code>.prich/templates/&lt;template_id&gt;/&lt;template_id&gt;.yaml</code> folder and file.</p> <p>Template YAML file consists of the following fields:</p> <pre><code># the lowercase id of the template using letters, numbers, hyphens, and underscores (without spaces), ex. `my-template`, `my_template`, `mytemplate`\nid: \"template_name\"             # [str]\n\n# name of the template, used just for the information\nname: \"Template Name\"           # [str]\n\n# version of the template, you can use it for template version maintenance\nversion: \"1.0\"                  # [str]\n\n# author of the template\nauthor: \"John Doe\"              # optional [str]\n\n# description of the template, would be visible in the list of templates\ndescription: \"My template\"      # [str]\n\n# list of lowercase template tags, used to categorize templates and for search\ntags: [\"code\", \"review\"]        # [list(str)]\n\n# list of pipeline workflow steps that would be executed in order during the template execution\nsteps:                          # [list(dict)]\n  - name: \"...\"\n  # ...: \"...\"\n  - name: \"...\"\n  # ...: \"...\"\n  # ...\n\nvariables:                      # optional [list(dict)]\n  - name: \"file\"\n  # ...: \"...\"\n  # ...\n\n# used to show examples of the template execution commands, used for information only\nusage_examples:                 # optional [list(str)]\n  - \"template_name --file myfile.txt\"\n  # ...\n\n# use only when `python` steps are used in the template to specify \n# if isolated venv should be created or to use one shared venv for all templates\n# isolated venvs created in `.prich/templates/&lt;template_id&gt;/scripts/venv folder\n# shared venv is created in `.prich/venv` folder\nvenv: \"isolated\"                # optional [str(\"isolated\"/\"shared\")]\n\n# version of the template schema to define support by the prich tool\nschema_version: \"1.0\"           # [str]\n</code></pre>"},{"location":"reference/template/content/#simple-example","title":"Simple Example","text":"<p>Just one step to ask LLM to generate some text</p> <pre><code>id: test-template\nname: Test Template\nversion: '1.0'\ndescription: Example template - Generate text about specified topic\ntags:\n- example\n- writer\nsteps:\n- name: Ask to generate text\n  type: llm\n  instructions: You are {{ role }}\n  input: Generate text about {{ topic }}\nvariables:\n- name: role\n  type: str\n  description: Role of the Assistant\n  default: article writer\n  required: false\n  cli_option: --role\n- name: topic\n  type: str\n  description: Generate text about Topic\n  default: short brief about LLM usage\n  required: false\n  cli_option: --topic\nschema_version: '1.0'\n</code></pre>"},{"location":"reference/template/content/#advanced-example","title":"Advanced Example","text":"<p>Where we execute several commands including prich itself, curl, cat, and assemble LLM request to help fixing the prich template yaml file.</p> <p>Keep in mind: This example is not optimal from the tokens size as it includes all main documentation parts to the LLM request.  Links and functionality could be also changed with time, the following template is given for a syntax example.</p> <pre><code>id: \"prich-template-help\"\nname: \"Prich Help\"\nschema_version: \"1.0\"\nversion: \"1.0\"\nauthor: \"prich\"\ndescription: Analyse template errors and provide fix suggestions\ntags: [\"prich\", \"help\"]\nsteps:\n  - name: \"Run prich validate for analysis of invalid template\"\n    type: command\n    call: prich\n    args:\n      - validate\n      - --invalid\n      - --id\n      - \"{{template_id}}\"\n      - \"{% if only_local %}-l{% endif %}\"  # when argument is \"\" it would be not be supplied\n      - \"{% if only_global %}-g{% endif %}\"\n    validate:\n      # prich validate returns exit code 2 when template failures found\n      match_exit_code: 2\n      # skip all the following steps\n      on_fail: skip\n      message: \"No template issues found\"\n    extract_variables:\n      - regex: \"[^|\\\\n]*- \\\\S+ \\\\(\\\\S+\\\\) (\\\\S+): is not valid\"  # extract template files\n        variable: \"template_files\"\n        multiple: true\n    filter:\n      strip: true \n      regex_extract: \"((?:.|\\n)+)\\\\nAnalysed \\\\d+ templates, \\\\d+ invalid.\"  # cut out redundant information\n    output_variable: \"validation_results\"\n\n  - name: \"Get template contents using cat command\"\n    # run only when template files extracted\n    when: \"(template_files | length) &gt; 0\"\n    type: command\n    call: cat\n    args:\n      - \"{{template_files[0] | replace('~', '$HOME') | replace('./', '$PWD') }}\"  # replace . and ~ with full path using env vars\n    filter:\n      strip: true\n    output_variable: \"template_content\"\n\n  - name: \"Get 2nd template contents using cat command\"\n    # run only if more than one template found (could be global and local with same name)\n    when: \"(template_files | length) &gt; 1\"\n    type: command\n    call: cat\n    args:\n      - \"{{template_files[1] | replace('~', '$HOME') | replace('./', '$PWD') }}\"\n    filter:\n      strip: true\n    output_variable: \"template2_content\"\n\n  - name: \"Get prich template content documentation from static github link\"\n    type: command\n    call: curl\n    args:\n      - -sL\n      - https://raw.githubusercontent.com/oleks-dev/prich/refs/heads/main/docs/reference/template/content.md\n    filter:\n      strip: true\n    output_variable: \"template_content_doc\"\n\n  - name: \"Get prich template steps documentation from static github link\"\n    type: command\n    call: curl\n    args:\n      - -sL\n      - https://raw.githubusercontent.com/oleks-dev/prich/refs/heads/main/docs/reference/template/steps.md\n    filter:\n      strip: true\n    output_variable: \"template_steps_doc\"\n\n  - name: \"Get prich template variables documentation\"\n    type: command\n    call: curl\n    args:\n      - -sL\n      - https://raw.githubusercontent.com/oleks-dev/prich/refs/heads/main/docs/reference/template/variables.md\n    filter:\n      strip: true\n    output_variable: \"template_variables_doc\"\n\n  - name: \"Ask to suggest template fixes\"\n    type: llm\n    instructions: |\n      Assistant is a senior engineer who help to fix yaml template issues for prich cli tool (tool for building, running, and sharing llm prompt template pipelines).\n    input: |\n      Prich Documentation link for reference https://oleks-dev.github.io/prich\n\n      --- start of https://oleks-dev.github.io/prich/reference/template/content/ ---\n      {{ template_content_doc }}\n      --- end ---\n\n      --- start of https://oleks-dev.github.io/prich/reference/template/steps/ ---\n      {{ template_steps_doc }}\n      --- end ---\n\n      --- start of https://oleks-dev.github.io/prich/reference/template/variables/ ---\n      {{ template_variables_doc }}\n      --- end ---\n\n      {% if template_content or template_content2 %}Current failed prich yaml template contents:{% endif %}\n      {% if template_content %}--- file: {{ template_files[0] }} ---\n      ```yaml\n      {{ template_content }}\n      ```\n      --- end ---{% endif %}\n      {% if template_content2 %}--- file: {{ template_files[1] }} ---\n      ```yaml\n      {{ template_content2 }}\n      ```\n      --- end ---{% endif %}\n\n      `prich validate` execution results:\n      ```\n      {{ validation_results }}\n      ```\n\n      Tool returns a list of available templates by template ids, location (local - .prich folder in cwd, global - .prich folder in home), and validation result \"is valid\" and \"is not valid\".\n      Format is a list like\n      ```\n      - &lt;template_id&gt; (&lt;location&gt;) &lt;path_to_template_yaml_file&gt;: &lt;is valid/is not valid&gt;\n        [optional_failure_details_list]\n      ```\n      For not valid templates tool adds details under the template list item about what exactly is wrong, it also could include the last child branch of the yaml structure where the problem is located. \n      Refer to the documentation while analysing templates validation output, for unrecognized fields suggest possible closest proper yaml fields usage from the documentation, for missing fields also describe yaml fields using documentation reference.\n      Produce list of templates with suggested fixes for each template id, provide yaml fix suggestion - put attention on yaml parent child fields that are used. Ensure that you are listing proper template ids from the results.\n      Ex.\n      ```\n      - &lt;template_id&gt; (&lt;location&gt;) &lt;path_to_template_yaml_file&gt;\n        &lt;suggested_fix_instructions&gt;\n      ```\nvariables:\n  - name: template_id\n    cli_option: --id\n    required: true\n    type: str\n  - name: only_local\n    cli_option: --only-local\n    type: bool\n  - name: only_global\n    cli_option: --only-global\n    type: bool\n</code></pre>"},{"location":"reference/template/steps/","title":"Steps <code>steps</code>","text":"<p>Each template can have multiple steps for pre/postprocessing and llm requests.</p> <pre><code>steps:\n  - ...\n  - ...\n</code></pre>"},{"location":"reference/template/steps/#generic-base-fields-for-each-step","title":"Generic base fields for each step","text":"<pre><code>steps:                            # [list]\n    # name of the step (should be unique)\n  - name: \"Step do work\"          # [str]\n    # type of the step, could be llm, command, python, render (see step types)\n\n    type: \"llm\"                   # [str]\n    # ...  other fields related to a specific step type\n</code></pre> <p>Note: Step name should be unique in each step.  </p>"},{"location":"reference/template/steps/#output-text-transformations","title":"Output text transformations","text":"<pre><code>steps:\n  - name: \"Do some work\"\n    # ...  other step fields are not shown in this example\n\n    # filter block describes output text transformations\n    filter:                       # optional [dict]\n      # strip spaces from beginning and end of the output\n      strip: true                 # optional [bool]\n\n      # strip prefix characters from the output\n      strip_prefix: \"&gt; \"          # optional [str]\n\n      # slice output from N character\n      slice_start: 3              # optional [int]\n\n      # slice output till N character \n      # (use negative number for backwards count)\n      slice_end: -1               # optional [int]\n\n      # filter output using regex \n      # (take 1st group if groups are used otherwise take matching regex)\n      regex_extract: \".*\"                 # optional [str]\n\n      # replace output text using regex patterns\n      regex_replace:          # optional [list(tuple(str,str))] - regex pattern, replace\n        - [\"(?i)(\\\"password\\\"\\s*:\\s*\\\")[^\\\"]+(\\\")\", \"\\\\1*****\\\\2\"]  # (ex. for json passwords sanitization)\n</code></pre> <p>Note: Output text transformation params applied one by one in order as they mentioned in the example, each next one uses result of the previous.  </p>"},{"location":"reference/template/steps/#store-and-show-output","title":"Store and show output","text":"<pre><code>steps:\n  - name: \"Do work\"\n    # ...  other step fields are not shown in this example\n\n    # save output to a variable\n    output_variable: \"out_var\"         # optional [str]\n\n    # save output to file\n    output_file: \"out.txt\"             # optional [str|dict] - write mode by default\n    # OR (use only one option)\n    output_file:\n      name: \"out.txt\"\n      # file mode write or append\n      mode: \"write\"          # optional [\"write\"|\"append\"]\n\n    # print output to console during normal execution\n    # (mostly for user reference when such information is needed)\n    output_console: false              # optional [bool]\n</code></pre>"},{"location":"reference/template/steps/#when-to-execute-conditional-statement","title":"When to execute - conditional statement","text":"<pre><code>steps:\n  - name: \"Do work\"\n    # ...  other step fields are not shown in this example\n\n    # when this step should be executed\n    # (jinja2 template conditional template)\n    when: \"{{ in_var == 'hello' }}\"    # optional [str]\n</code></pre>"},{"location":"reference/template/steps/#extract-variables","title":"Extract variables","text":"<pre><code>steps:\n  - name: \"Do work\"\n    # ...  other step fields are not shown in this example\n\n    # create variables with extracted text from output\n    extract_variables:                 # optional [list[dict]]\n\n      # extract value using regex \n      # (same regex rules as in `output_regex`)\n      - regex: \"(\\\\d+)\"                # [str]\n\n        # variable name to create or update\n        variable: \"items_count\"        # [str]\n\n        # extract all occurrences into a list (false by default)\n        multiple: false                # optional [bool]\n</code></pre> <p>Note: When extracting variables with <code>extract_variables</code> the full initial output text is used (before transformations)  </p>"},{"location":"reference/template/steps/#validate-output","title":"Validate output","text":"<pre><code>steps:\n  - name: \"Do work\"\n    # ...  other step fields are not shown in this example\n\n    # validate step output\n    validate:                          # optional [dict|list[dict]]\n\n      # matching regex pattern\n      - match: \".*\"                    # optional [str]\n\n        # not matching regex pattern\n        not_match: \"^title\"            # optional [str]\n\n        # what to do on validation failure\n        on_fail: \"error\"               # optional [\"error\"|\"warn\"|\"skip\"|\"continue\"]\n\n        # custom message shown on failure\n        message: \"Failed to validate\"  # optional [str]\n</code></pre>"},{"location":"reference/template/steps/#step-types","title":"Step types","text":""},{"location":"reference/template/steps/#python-step","title":"Python step","text":"<pre><code>steps:\n  - name: \"Run python script\"\n    # ...  other step fields are not shown in this example\n\n    type: \"python\"                     # execute python script\n    call: \"file.py\"                    # python file to execute\n    args: [\"arg1\", \"arg2\"]             # optional [list[str]] - arguments for python file\n    validate:\n#      ...  could include standard validations plus following specific to the python and command types\n       match_exit_code: 0              # optional [int|str] - check execution result exit code\n       not_match_exit_code: 1          # optional [int|str] - check execution result exit code\n</code></pre> <p>Note: Python step uses python based on template <code>venv</code> settings (see Template &gt; Content)  </p>"},{"location":"reference/template/steps/#command-step","title":"Command step","text":"<pre><code>steps:\n  - name: \"Run command shell execution\"\n    # ...  other step fields are not shown in this example\n\n    type: \"command\"                    # execute shell command\n    call: \"echo\"                       # file to execute\n    args: [\"hello\"]                    # optional [list[str]] - arguments for file execution\n    validate:\n#      ...  could include standard validations plus following specific to the python and command types\n       match_exit_code: 0              # optional [int|str] - check execution result exit code\n       not_match_exit_code: 1          # optional [int|str] - check execution result exit code\n</code></pre>"},{"location":"reference/template/steps/#llm-step","title":"LLM step","text":"<pre><code>steps:\n  - name: \"Ask LLM with prompt\"\n    # ...  other step fields are not shown in this example\n\n    type: \"llm\"                                    # send llm prompt\n    instructions: \"You are {{ assistant_type }}.\"  # optional [str] - system instructions (jinja2 template string)\n    input: \"Summarize the following:\\n{{ text }}\"  # [str] - user prompt input (jinja2 template string)\n</code></pre>"},{"location":"reference/template/steps/#render-step","title":"Render step","text":"<pre><code>steps:\n  - name: \"Render jinja template text\"\n    # ...  other step fields are not shown in this example\n\n    type: \"render\"                    # execute jinja2 render\n    template: \"Hello {{ user_var }}\"  # jinja2 template string\n</code></pre>"},{"location":"reference/template/variables/","title":"Variables","text":"<p><code>variables</code> is a list section that defines initial variables available for the template, can be supplied via CLI or by using default value (hardcoded or using env variable)</p>"},{"location":"reference/template/variables/#defining-variables","title":"Defining Variables","text":"<pre><code>variables:                          # optional [list]\n    # name of the variable (should match specific formatting)\n  - name: \"test_variable\"           # [str]\n\n    # name of the cli option for setting this variable\n    # if not added then the cli option would be taken from name like `--{name}`\n    # useful when you like to use hyphen in the name for example or just a shorter form\n    cli_option: \"--test-var\"        # optional [str]\n\n    # description, shown in the with the --help option\n    description: \"Input file\"       # optional [str]\n\n    # type of the value, default is \"str\"\n    # \"str\" (default)\n    # \"int\"\n    # \"bool\" (use for flags without values, ex `--report`, `--review`)\n    # \"path\" (use for paths or files)\n    # use list of type for multiple params supplied, ex. `--text \"hello\" --text \"world\" --text \"!\"`\n    # loads into `text` list variable\n    # \"list[&lt;type&gt;]\" (ex. \"list[str]\", \"list[bool]\")\n    type: \"str\"                     # optional [str]\n\n    # default value assigned to the variable\n    # it would be overwritten if supplied as cli option\n    default: \"test\"                 # optional [str]\n\n    # is variable required, default is false\n    # template will fail if variable is required but no default value is set or not supplied as a cli option\n    required: true                  # optional [bool]\n\n  # ...\n</code></pre> <p>NOTE: <code>name</code> of the variable should be lowercase and contain only letters, numbers, and underscores.</p>"},{"location":"reference/template/variables/#examples","title":"Examples","text":"<pre><code>- name: count\n  type: int\n  description: Number of iterations\n  required: true\n  cli_option: --count\n- name: role\n  type: str\n  description: Role of the Assistant\n  default: article writer\n  cli_option: --role\n- name: topic\n  description: Generate text about Topic\n  default: short brief about LLM usage\n  cli_option: --topic\n</code></pre>"},{"location":"tutorials/quickstart/","title":"Quickstart","text":"<p>This gets you from zero to a runnable template, then switches to a real provider.</p>"},{"location":"tutorials/quickstart/#1-install-prich","title":"1) Install prich","text":"<p>Recommended (isolated):</p> <pre><code>pipx install git+https://github.com/oleks-dev/prich\n</code></pre> <p>Alternative with uv:</p> <pre><code>uv venv prich-env\nsource prich-env/bin/activate\nuv pip install git+https://github.com/oleks-dev/prich\n</code></pre> <p>Or clone + <code>pip install .</code></p>"},{"location":"tutorials/quickstart/#2-initialize","title":"2) Initialize","text":"<p>Use a global home for shared templates/config:</p> <pre><code>prich init --global\n# creates ~/.prich and ~/.prich/venv\n</code></pre> <p>Project-local variant:</p> <pre><code>prich init\n# creates ./.prich and ./.prich/venv\n</code></pre> <p>(You can have both; locals override globals by merging.)</p>"},{"location":"tutorials/quickstart/#3-create-template","title":"3) Create Template","text":"<p>Global:  </p> <pre><code>prich create my-template --global\n# creates ./.prich/templates/my-template/my-template.yaml\n</code></pre> <p>Project-local variant:  </p> <pre><code>prich create my-template\n# creates ~/.prich/templates/my-template/my-template.yaml\n</code></pre> <p>List what you have:  </p> <pre><code>prich list\n# returns list of global overridden by project-local specific\nprich list --global\n# returns list of global\nprich list --local\n# returns list of local\n</code></pre>"},{"location":"tutorials/quickstart/#4-run-it","title":"4) Run it","text":"<pre><code>prich run my-template --help\n# see what options are available for the template\nprich run my-template\n# run without options\n</code></pre> <p>By default, prich uses the echo provider (shows rendered prompt without calling an LLM).</p>"},{"location":"tutorials/quickstart/#5-point-to-a-real-provider","title":"5) Point to a real provider","text":"<p>Open ~/.prich/config.yaml (or ./.prich/config.yaml). Define one or more providers (see Reference \u2192 Providers). Examples:</p> <ul> <li>Ollama (local):  </li> </ul> <pre><code>llama3.1-8b:\n  provider_type: ollama\n  model: \"llama3.1:8b\"\n  stream: false\n  options:\n    num_predict: 2000\n</code></pre> <ul> <li>OpenAI-compatible HTTP:  </li> </ul> <pre><code>openai-gpt4o:\n  provider_type: openai\n  configuration:\n    api_key: \"${OPENAI_API_KEY}\"\n    base_url: \"https://api.openai.com/v1\"   # use your endpoint\n  options:\n    model: \"gpt-4o\"\n</code></pre> <ul> <li>MLX LM (mac, local):  </li> </ul> <pre><code>mlx-mistral-7b:\n  provider_type: \"mlx_local\"\n  model_path: \"/path/to/model\"\n  mode: flat\n  max_tokens: 3000\n</code></pre> <ul> <li>STDIN bridge (e.g., q chat):  </li> </ul> <pre><code>qchat:\n  provider_type: stdin_consumer\n  mode: plain\n  call: q\n  args: [\"chat\", \"--no-interactive\"]\n</code></pre> <p>Note: All provider fields and modes are detailed in the Providers reference.</p> <p>And set your default provider:</p> <pre><code>settings:\n  default_provider: \"llama3.1-8b\"  # example\n  editor: \"vim\"\n</code></pre>"},{"location":"tutorials/quickstart/#6-try-a-real-example","title":"6) Try a real example","text":"<p>You can install from a remote repo or local folder/zip:</p> <pre><code># Discover remote templates\nprich list --remote\nprich list --remote --tag code --tag review\n\n# Install one\nprich install summarize-git-diff --remote\n</code></pre> <p>Then run it, e.g.:</p> <pre><code>prich run summarize-git-diff --review\n</code></pre> <p>The template will execute shell steps (like git diff) and then call your configured LLM provider.</p> <p>Tip: For team repos with Python helpers, ignore venv in VCS and ask teammates to run: prich venv-install (or --force to rebuild).</p>"}]}