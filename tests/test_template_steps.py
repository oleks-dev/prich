import click
import pytest
from prich.models.config_providers import EchoProviderModel

from prich.models.config import SettingsConfig, ProviderModeModel
from prich.models.template import TemplateModel, LLMStep
from prich.models.config import ConfigModel
from tests.fixtures.paths import mock_paths
from tests.utils.utils import capture_stdout

sample_variables = {
    "name": "Example Name",
    "assistant": "System Assistant"
}

@pytest.mark.parametrize("template_string, expected, expected_exception, expected_exception_message", [
    ("Hello $HOME", "Hello $HOME", None, None),
    ("Hello ${HOME}", "Hello ${HOME}", None, None),
    ("Hello {{ assistant }}", "Hello System Assistant", None, None),
    ("Hello {{ assistant|upper }}", "Hello SYSTEM ASSISTANT", None, None),
    ("Hello {{ assistant }}   ", "Hello System Assistant", None, None),
    ("{% if assistant %}{{assistant}}{% endif %}", "System Assistant", None, None),
    ("{{assistant{{assistant}}}}", None, click.ClickException, "Render jinja error: expected token 'end of print statement', got '{'"),
    ("{{}}", None, click.ClickException, "Render jinja error: Expected an expression, got 'end of print statement'"),
    ("", "", None, None),
])
def test_step_render_template(monkeypatch, template_string, expected, expected_exception, expected_exception_message):
    from prich.core.steps.step_render_template import render_template
    from prich.models.template import RenderStep
    if expected_exception:
        with pytest.raises(Exception) as e:
            render_template(RenderStep(type="render", name="Render Step", template=template_string), sample_variables)
        assert str(e.value) == expected_exception_message
    else:
        # non-verbose
        actual_res, actual_output = capture_stdout(render_template, RenderStep(type="render", name="Render Step", template=template_string), sample_variables)
        # check method return value
        assert actual_res == expected

        # verbose
        monkeypatch.setattr("prich.core.steps.step_render_template.is_verbose", lambda: True)
        actual_res, actual_output = capture_stdout(render_template, RenderStep(type="render", name="Render Step", template=template_string), sample_variables)
        # check verbose info
        assert actual_output == f"Render template:\n{template_string}\n\nResult:\n"
        # check method return value
        assert actual_res == expected


get_step_send_to_llm_CASES = [
    {"id": "no_step_input_field",
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test")]),
     "step": LLMStep(type="llm", name="test"),
     "provider": None,
     "config": ConfigModel(providers={}, provider_modes=[]),
     "variables": {},
     "expected_output": None,
     "expected_exception": click.ClickException,
     "expected_exception_message": "llm step must define at least 'input' field."
     },
    {"id": "no_providers_available",
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", input="hello")]),
     "step": LLMStep(type="llm", name="test", input="hello"),
     "provider": None,
     "config": ConfigModel(providers={}, provider_modes=[]),
     "variables": {},
     "expected_output": None,
     "expected_exception": click.ClickException,
     "expected_exception_message": "Provider configuration not found. Check your config.yaml file.",
     },
    {"id": "default_provider_not_found",
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", input="hello")]),
     "step": LLMStep(type="llm", name="test", input="hello"),
     "provider": None,
     "config": ConfigModel(providers={}, provider_modes=[], settings=SettingsConfig(default_provider="default-provider")),
     "variables": {},
     "expected_output": None,
     "expected_exception": click.ClickException,
     "expected_exception_message": "Provider default-provider configuration not found. Check your config.yaml file.",
     },
    {"id": "overloaded_provider_not_found",
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", input="hello")]),
     "step": LLMStep(type="llm", name="test", input="hello"),
     "provider": "overload-provider",
     "config": ConfigModel(providers={}, provider_modes=[], settings=SettingsConfig(default_provider="default-provider")),
     "variables": {},
     "expected_output": None,
     "expected_exception": click.ClickException,
     "expected_exception_message": "Provider overload-provider configuration not found. Check your config.yaml file.",
     },
    {"id": "step_provider_assignment_not_found",
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", input="hello", provider="step-assigned-provider")]),
     "step": LLMStep(type="llm", name="test", input="hello", provider="step-assigned-provider"),
     "provider": None,
     "config": ConfigModel(providers={}, provider_modes=[], settings=SettingsConfig(default_provider="default-provider")),
     "variables": {},
     "expected_output": None,
     "expected_exception": click.ClickException,
     "expected_exception_message": "Provider step-assigned-provider configuration not found. Check your config.yaml file.",
     },
    {"id": "config_template_provider_assignment_not_found",
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", input="hello")]),
     "step": LLMStep(type="llm", name="test", input="hello"),
     "provider": None,
     "config": ConfigModel(providers={}, provider_modes=[], settings=SettingsConfig(default_provider="default-provider", provider_assignments={"test": "config-template-assigned-provider"})),
     "variables": {},
     "expected_output": None,
     "expected_exception": click.ClickException,
     "expected_exception_message": "Provider config-template-assigned-provider configuration not found. Check your config.yaml file.",
     },
    {"id": "correct_call_only_input",
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", input="hello")]),
     "step": LLMStep(type="llm", name="test", input="hello"),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo")}, provider_modes=[], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "",
     "expected_return": "hello",
     },
    {"id": "correct_call_only_input__verbose",
     "verbose": True,
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", input="hello")]),
     "step": LLMStep(type="llm", name="test", input="hello"),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo")}, provider_modes=[], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "Selected LLM provider: echo-provider\nSending prompt to LLM (echo-provider), 5 chars\nhello\n\nLLM Response:\nhello\n",
     "expected_return": "hello",
     },
    {"id": "correct_call_only_input__quiet",
     "quiet": True,
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", input="hello")]),
     "step": LLMStep(type="llm", name="test", input="hello"),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo")}, provider_modes=[], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "",
     "expected_return": "hello",
     },
    {"id": "correct_call_only_input__show_only_final",
     "show_only_final": True,
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", input="hello")]),
     "step": LLMStep(type="llm", name="test", input="hello"),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo")}, provider_modes=[], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "",
     "expected_return": "hello",
     },
    {"id": "correct_call_only_input__verbose__only_final_output",
     "verbose": True,
     "only_final_output": True,
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", input="hello")]),
     "step": LLMStep(type="llm", name="test", input="hello"),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo")}, provider_modes=[], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "",
     "expected_return": "hello",
     },
    {"id": "correct_call_only_input__verbose__quiet",
     "verbose": True,
     "quiet": True,
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", input="hello")]),
     "step": LLMStep(type="llm", name="test", input="hello"),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo")}, provider_modes=[], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "",
     "expected_return": "hello",
     },
    {"id": "correct_call_only_input__verbose__quiet__only_final_output",
     "quiet": True,
     "verbose": True,
     "only_final_output": True,
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", input="hello")]),
     "step": LLMStep(type="llm", name="test", input="hello"),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo")}, provider_modes=[], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "",
     "expected_return": "hello",
     },
    {"id": "correct_call",
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", instructions="as an test engineer", input="hello")]),
     "step": LLMStep(type="llm", name="test", instructions="as a test engineer", input="hello"),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo")}, provider_modes=[], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "",
     "expected_return": "as a test engineer\nhello",
     },
    {"id": "correct_call_step_output_console",
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", instructions="as an test engineer", input="hello", output_console=True)]),
     "step": LLMStep(type="llm", name="test", instructions="as a test engineer", input="hello", output_console=True),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo")}, provider_modes=[], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "as a test engineer\nhello\n",
     "expected_return": "as a test engineer\nhello",
     },
    {"id": "correct_call_step_output_console__verbose",
     "verbose": True,
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", instructions="as an test engineer", input="hello", output_console=True)]),
     "step": LLMStep(type="llm", name="test", instructions="as a test engineer", input="hello", output_console=True),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo")}, provider_modes=[], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "Selected LLM provider: echo-provider\nSending prompt to LLM (echo-provider), 24 chars\nas a test engineer\nhello\n\nLLM Response:\nas a test engineer\nhello\n",
     "expected_return": "as a test engineer\nhello",
     },
    {"id": "correct_call_step_output_console__quiet",
     "quiet": True,
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", instructions="as an test engineer", input="hello", output_console=True)]),
     "step": LLMStep(type="llm", name="test", instructions="as a test engineer", input="hello", output_console=True),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo")}, provider_modes=[], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "",
     "expected_return": "as a test engineer\nhello",
     },
    {"id": "correct_call_step_output_console__only_final_output",
     "only_final_output": True,
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", instructions="as an test engineer", input="hello", output_console=True)]),
     "step": LLMStep(type="llm", name="test", instructions="as a test engineer", input="hello", output_console=True),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo")}, provider_modes=[], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "",
     "expected_return": "as a test engineer\nhello",
     },
    {"id": "correct_call_step_output_console__verbose__quiet",
     "quiet": True,
     "verbose": True,
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", instructions="as an test engineer", input="hello", output_console=True)]),
     "step": LLMStep(type="llm", name="test", instructions="as a test engineer", input="hello", output_console=True),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo")}, provider_modes=[], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "",
     "expected_return": "as a test engineer\nhello",
     },
    {"id": "correct_call_step_output_console__verbose__only_final_output",
     "verbose": True,
     "only_final_output": True,
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", instructions="as an test engineer", input="hello", output_console=True)]),
     "step": LLMStep(type="llm", name="test", instructions="as a test engineer", input="hello", output_console=True),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo")}, provider_modes=[], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "",
     "expected_return": "as a test engineer\nhello",
     },
    {"id": "correct_call_step_output_console__verbose__quiet__only_final_output",
     "quiet": True,
     "verbose": True,
     "only_final_output": True,
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", instructions="as an test engineer", input="hello", output_console=True)]),
     "step": LLMStep(type="llm", name="test", instructions="as a test engineer", input="hello", output_console=True),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo")}, provider_modes=[], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "",
     "expected_return": "as a test engineer\nhello",
     },
    {"id": "correct_call_with_not_existing_provider_prompt",
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", instructions="as an test engineer", input="hello")]),
     "step": LLMStep(type="llm", name="test", instructions="as a test engineer", input="hello"),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo", mode="notexisting")}, provider_modes=[ProviderModeModel(name="custom", prompt="{% if instructions %}System:\n{{instructions}}\n{% endif %}User:\n{{input}}\n")], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_exception": click.ClickException,
     "expected_exception_message": "Prompt mode notexisting is not found in the config.",
     },
    {"id": "correct_call_with_not_existing_provider_prompt_and_no_provider_prompts",
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", instructions="as an test engineer", input="hello")]),
     "step": LLMStep(type="llm", name="test", instructions="as a test engineer", input="hello"),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo", mode="notexisting")}, provider_modes=[], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_exception": click.ClickException,
     "expected_exception_message": "Prompt mode notexisting is not found in the config.",
     },
    {"id": "correct_call_with_custom_provider_prompt",
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", instructions="as an test engineer", input="hello")]),
     "step": LLMStep(type="llm", name="test", instructions="as a test engineer", input="hello"),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo", mode="custom")}, provider_modes=[ProviderModeModel(name="custom", prompt="{% if instructions %}System:\n{{instructions}}\n{% endif %}User:\n{{input}}\n")], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "",
     "expected_return": "System:\nas a test engineer\nUser:\nhello",
     },
    {"id": "correct_call_with_custom_provider_prompt__verbose",
     "verbose": True,
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", instructions="as an test engineer", input="hello")]),
     "step": LLMStep(type="llm", name="test", instructions="as a test engineer", input="hello"),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo", mode="custom")}, provider_modes=[ProviderModeModel(name="custom", prompt="{% if instructions %}System:\n{{instructions}}\n{% endif %}User:\n{{input}}\n")], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "Selected LLM provider: echo-provider\nSending prompt to LLM (echo-provider), 38 chars\nSystem:\nas a test engineer\nUser:\nhello\n\nLLM Response:\nSystem:\nas a test engineer\nUser:\nhello\n",
     "expected_return": "System:\nas a test engineer\nUser:\nhello",
     },
    {"id": "correct_call_with_custom_provider_prompt__only_final_output",
     "only_final_output": True,
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", instructions="as an test engineer", input="hello")]),
     "step": LLMStep(type="llm", name="test", instructions="as a test engineer", input="hello"),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo", mode="custom")}, provider_modes=[ProviderModeModel(name="custom", prompt="{% if instructions %}System:\n{{instructions}}\n{% endif %}User:\n{{input}}\n")], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {},
     "expected_output": "",
     "expected_return": "System:\nas a test engineer\nUser:\nhello",
     },
    {"id": "empty_prompt_exception",
     "template": TemplateModel(id="test", name="test", steps=[LLMStep(type="llm", name="test", input="{{ test_var }}")]),
     "step": LLMStep(type="llm", name="test", input="{{ test_var }}"),
     "provider": None,
     "config": ConfigModel(providers={"echo-provider": EchoProviderModel(name="echo-provider", provider_type="echo")}, provider_modes=[], settings=SettingsConfig(default_provider="echo-provider")),
     "variables": {"test_var": ""},
     "expected_output": None,
     "expected_exception": click.ClickException,
     "expected_exception_message": "Prompt is empty in step test.",
     },
]
@pytest.mark.parametrize("case", get_step_send_to_llm_CASES, ids=[c["id"] for c in get_step_send_to_llm_CASES])
def test_step_send_to_llm(tmp_path, mock_paths, case, monkeypatch):
    from prich.core.steps.step_send_to_llm import send_to_llm

    if case.get("expected_exception"):
        with pytest.raises(Exception) as e:
            send_to_llm(case.get("template"), case.get("step"), case.get("provider"), case.get("config"), case.get("variables"))
        assert str(e.value) == case.get("expected_exception_message")
    else:

        if case.get("verbose"):
            monkeypatch.setattr("prich.core.utils.is_verbose", lambda: True)
            monkeypatch.setattr("prich.core.steps.step_send_to_llm.is_verbose", lambda: True)

        if case.get("quiet"):
            monkeypatch.setattr("prich.core.utils.is_quiet", lambda: True)
            monkeypatch.setattr("prich.core.steps.step_send_to_llm.is_quiet", lambda: True)

        if case.get("only_final_output"):
            monkeypatch.setattr("prich.core.utils.is_only_final_output", lambda: True)
            monkeypatch.setattr("prich.core.steps.step_send_to_llm.is_only_final_output", lambda: True)

        actual_res, actual_output = capture_stdout(send_to_llm, case.get("template"), case.get("step"), case.get("provider"), case.get("config"), case.get("variables"))
        # check console output
        assert actual_output == case.get('expected_output', ''), "Method output to console value failed"
        # check method return
        assert actual_res == case.get("expected_return"), "Method return value failed"
